/**
 * @author Lissillour Benjamin
 */

package models;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.nio.file.Path;
import java.nio.file.Paths;

import models.lifeform.Human;
import models.lifeform.animal.Pig;

import org.hamcrest.CoreMatchers;
import org.hamcrest.MatcherAssert;
import org.junit.Before;
import org.junit.Test;

import demonstrateur.Frosh;

/**
 * The Class LifeformTest.
 */
public class LifeformTest {

    /**
     * Equals.
     * 
     * @throws Exception
     *             the exception
     */
    @Test
    public void equals( ) throws Exception {

        final Human human1 = new Human( 0, 0 );
        final Human human2 = new Human( 0, 0 );
        final Human human3 = new Human( 1, 0 );
        final Pig pig1 = new Pig( 0, 0, false );
        final Pig pig2 = new Pig( 1, 1, false );
        final Pig pig3 = new Pig( 0, 0, true );

        MatcherAssert.assertThat( human2, CoreMatchers.equalTo( human1 ) );
        MatcherAssert.assertThat( human2,
                CoreMatchers.not( CoreMatchers.equalTo( human3 ) ) );
        MatcherAssert.assertThat( human2,
                CoreMatchers.not( CoreMatchers.equalTo( ( Lifeform ) pig1 ) ) );
        MatcherAssert.assertThat( pig1,
                CoreMatchers.not( CoreMatchers.equalTo( pig2 ) ) );
        MatcherAssert.assertThat( pig3,
                CoreMatchers.not( CoreMatchers.equalTo( pig2 ) ) );
        MatcherAssert.assertThat( pig3,
                CoreMatchers.not( CoreMatchers.equalTo( pig1 ) ) );

    }

    /**
     * Initialisation.
     */
    @Before
    public void initialisation( ) {
        try {
            final Method m = Frosh.class.getDeclaredMethod( "loadConfigFile",
                    Path.class );
            m.setAccessible( true );
            m.invoke( null, Paths.get( Frosh.FOLDER, Frosh.CONFIG ) );

        } catch( IllegalAccessException | IllegalArgumentException
                | InvocationTargetException | NoSuchMethodException
                | SecurityException e ) {
            // TODO Auto-generated catch block
            e.printStackTrace( );
        }
        // System.out.println( "Bite" );
    }

    /**
     * Checks if is immune_ a$ disease.
     * 
     * @throws Exception
     *             the exception
     */
    @Test
    public void isImmune_A$Disease( ) throws Exception {
        /*
         * // TODO auto-generated by JUnit Helper. final int column = 0; final
         * int line = 0; final Lifeform target = new Lifeform(column, line);
         * final Disease disease = null; final boolean actual =
         * target.isImmune(disease); final boolean expected = false;
         * Assert.assertThat(actual,
         * 
         * CoreMatchers.is(CoreMatchers.equalTo(expected)));
         */
    }

    /**
     * Next day_ a$ list$ list.
     * 
     * @throws Exception
     *             the exception
     */
    @Test
    public void nextDay_A$List$List( ) throws Exception {
        /*
         * // TODO auto-generated by JUnit Helper. final int column = 0; final
         * int line = 0; final Lifeform target = new Lifeform(column, line);
         * final List<Lifeform> neighbors = new ArrayList<Lifeform>(); final
         * List<Cardinal> freeSpace = new ArrayList<Cardinal>();
         * target.nextDay(neighbors, freeSpace);
         */
    }

    /**
     * Test clone.
     * 
     * @throws Exception
     *             the exception
     */
    @Test
    public void TestClone( ) throws Exception {

        final Human human1 = new Human( 0, 0 );
        final Human human2 = ( Human ) human1.clone( );

        human1.setColumn( 5 );

        MatcherAssert
                .assertThat( human1.getColumn( ), CoreMatchers
                        .not( CoreMatchers.equalTo( human2.getColumn( ) ) ) );

    }

    /**
     * Will change grid state_ a$.
     * 
     * @throws Exception
     *             the exception
     */
    @Test
    public void willChangeGridState_A$( ) throws Exception {
        /*
         * // TODO auto-generated by JUnit Helper. final int column = 0; final
         * int line = 0; final Lifeform target = new Lifeform(column, line);
         * final boolean actual = target.willChangeGridState(); final boolean
         * expected = false; Assert.assertThat(actual,
         * CoreMatchers.is(CoreMatchers.equalTo(expected)));
         */
    }

}
