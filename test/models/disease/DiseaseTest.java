
package models.disease;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.nio.file.Path;
import java.nio.file.Paths;

import org.junit.Before;
import org.junit.Test;

import demonstrateur.Frosh;

public class DiseaseTest {

    @Test
    public void nextDay_A$( ) throws Exception {
        /*
         * // TODO auto-generated by JUnit Helper. final Lifeform carrier =
         * null; final Disease target = new Disease(carrier); target.nextDay();
         */
    }

    @Before
    public void initialisation( ) {
        try {
            Method m = Frosh.class.getDeclaredMethod( "loadConfigFile",
                    Path.class );
            m.setAccessible( true );
            m.invoke( null, Paths.get( Frosh.FOLDER, Frosh.CONFIG ) );

        } catch( IllegalAccessException | IllegalArgumentException
                | InvocationTargetException | NoSuchMethodException
                | SecurityException e ) {
            // TODO Auto-generated catch block
            e.printStackTrace( );
        }
        // System.out.println( "Bite" );
    }

}
